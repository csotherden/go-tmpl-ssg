{{- /* layout:base.tmpl */ -}}

<div class="prose prose-blue max-w-none">
    <div class="bg-blue-50 border-l-4 border-blue-500 p-4 my-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-blue-700">
                    This example demonstrates how to build a professional personal portfolio website with Go Template SSG. It showcases multi-page architecture, shared components, blog functionality, and a responsive design using Tailwind CSS.
                </p>
            </div>
        </div>
    </div>
    
    <h2 id="overview" class="text-2xl font-bold mt-8 mb-4">Overview</h2>
    <p class="text-gray-700 mb-4">
        The portfolio example illustrates how to create a multi-page personal portfolio website for a web developer named "Jane Doe". Unlike the landing page example which is a single page, this example demonstrates how to structure a more complex website with multiple sections and page types, including:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700">A homepage featuring key information and highlights</li>
        <li class="text-gray-700">An about page with personal details and skills</li>
        <li class="text-gray-700">A projects gallery showcasing recent work</li>
        <li class="text-gray-700">A blog section with multiple articles</li>
        <li class="text-gray-700">A contact page with a form</li>
    </ul>
    
    <h2 id="directory-structure" class="text-2xl font-bold mt-8 mb-4">Project Structure</h2>
    <p class="text-gray-700 mb-4">
        The portfolio example follows a structure that supports multiple pages and content types:
    </p>
    
    <div class="bg-gray-50 rounded-md p-4 mb-6 overflow-x-auto">
        <pre><code>examples/portfolio/
├── layouts/        # Layout templates
│   └── base.tmpl   # Base layout template
├── components/     # Reusable component templates
│   ├── header.tmpl # Site header with navigation
│   ├── footer.tmpl # Site footer component
│   ├── project-card.tmpl # Project display card
│   ├── blog-card.tmpl # Blog post display card
│   ├── skills.tmpl # Skills display component
│   └── contact-form.tmpl # Contact form component
└── pages/          # Page templates
    ├── index.tmpl  # Homepage template
    ├── about.tmpl  # About page template
    ├── projects/
    │   ├── index.tmpl # Projects list page
    │   └── project.tmpl # Individual project page
    ├── blog/
    │   ├── index.tmpl # Blog list page
    │   └── post.tmpl # Individual blog post page
    └── contact.tmpl # Contact page template</code></pre>
    </div>
    
    <h2 id="architecture" class="text-2xl font-bold mt-8 mb-4">Architecture</h2>
    
    <h3 id="layout" class="text-xl font-semibold mt-6 mb-3">Layout</h3>
    <p class="text-gray-700 mb-4">
        The portfolio uses a consistent base layout defined in <code class="bg-gray-100 px-1 rounded">layouts/base.tmpl</code>. This layout provides the HTML structure, loads Tailwind CSS, adds necessary meta tags, and includes the shared header and footer components. It creates a consistent design language across all pages of the site.
    </p>
    
    <h3 id="components" class="text-xl font-semibold mt-6 mb-3">Components</h3>
    <p class="text-gray-700 mb-4">
        The portfolio uses several reusable components to maintain consistency and reduce duplication across pages:
    </p>
    
    <div class="overflow-x-auto">
        <table class="w-full mt-4 mb-6 border-collapse">
            <thead class="bg-gray-100">
                <tr>
                    <th class="py-2 px-4 text-left font-semibold border-b">Component</th>
                    <th class="py-2 px-4 text-left font-semibold border-b">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">header.tmpl</code></td>
                    <td class="py-2 px-4">Responsive navigation bar with mobile menu toggle</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">footer.tmpl</code></td>
                    <td class="py-2 px-4">Site footer with copyright information and social links</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">project-card.tmpl</code></td>
                    <td class="py-2 px-4">Card display for projects with image, title, description, and tags</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">blog-card.tmpl</code></td>
                    <td class="py-2 px-4">Card display for blog posts with featured image, date, title, and excerpt</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">skills.tmpl</code></td>
                    <td class="py-2 px-4">Visual representation of technical skills with progress bars</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">contact-form.tmpl</code></td>
                    <td class="py-2 px-4">Interactive contact form with field validation</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <h3 id="pages" class="text-xl font-semibold mt-6 mb-3">Pages</h3>
    <p class="text-gray-700 mb-4">
        The portfolio example demonstrates a multi-page website with several different page types:
    </p>
    
    <div class="overflow-x-auto">
        <table class="w-full mt-4 mb-6 border-collapse">
            <thead class="bg-gray-100">
                <tr>
                    <th class="py-2 px-4 text-left font-semibold border-b">Page</th>
                    <th class="py-2 px-4 text-left font-semibold border-b">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">index.tmpl</code></td>
                    <td class="py-2 px-4">Homepage with hero section, featured projects, latest blog posts, and a skills overview</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">about.tmpl</code></td>
                    <td class="py-2 px-4">Detailed about page with bio, professional experience, education history, and full skills list</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">projects/index.tmpl</code></td>
                    <td class="py-2 px-4">Projects gallery page with filtering by technology/category</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">projects/project.tmpl</code></td>
                    <td class="py-2 px-4">Detailed project page template for individual projects</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">blog/index.tmpl</code></td>
                    <td class="py-2 px-4">Blog archive page listing all blog posts with pagination</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">blog/post.tmpl</code></td>
                    <td class="py-2 px-4">Blog post template with author info, published date, content, and social sharing</td>
                </tr>
                <tr class="border-b">
                    <td class="py-2 px-4"><code class="bg-gray-100 px-1 rounded">contact.tmpl</code></td>
                    <td class="py-2 px-4">Contact page with form, direct contact information, and location map</td>
                </tr>
            </tbody>
        </table>
    </div>
    
    <h3 id="data" class="text-xl font-semibold mt-6 mb-3">Data Structure</h3>
    <p class="text-gray-700 mb-4">
        The portfolio example uses JSON data files to drive content for each page template. The data structure includes:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700">Site-wide configuration (title, description, author info)</li>
        <li class="text-gray-700">Page-specific content (headings, text blocks, images)</li>
        <li class="text-gray-700">Projects data (title, description, technologies, images)</li>
        <li class="text-gray-700">Blog posts data (title, content, publish date, featured image)</li>
        <li class="text-gray-700">Skills data (categories, names, proficiency levels)</li>
    </ul>
    
    <p class="text-gray-700 mb-4">
        Each page has its own JSON data file that follows the naming convention of the template. For example:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">pages/index.tmpl.json</code> for the homepage</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">pages/about.tmpl.json</code> for the about page</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">pages/projects/index.tmpl.json</code> for the projects list</li>
    </ul>
    
    <h2 id="implementation-details" class="text-2xl font-bold mt-8 mb-4">Implementation Details</h2>
    
    <h3 id="responsive-design" class="text-xl font-semibold mt-6 mb-3">Responsive Design</h3>
    <p class="text-gray-700 mb-4">
        The portfolio is fully responsive, with layouts that adapt to mobile, tablet, and desktop screen sizes. Tailwind CSS utility classes are used extensively to create responsive layouts without writing custom CSS. Key responsive features include:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700">A collapsible mobile navigation menu</li>
        <li class="text-gray-700">Grid layouts that adjust column counts based on screen width</li>
        <li class="text-gray-700">Typography that scales appropriately for different devices</li>
        <li class="text-gray-700">Images that resize and maintain aspect ratios</li>
    </ul>
    
    <h3 id="dynamic-content" class="text-xl font-semibold mt-6 mb-3">Dynamic Content Generation</h3>
    <p class="text-gray-700 mb-4">
        The portfolio example demonstrates how to generate content dynamically based on data files:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700"><strong class="font-semibold">Project Pages:</strong> Individual project pages are generated from a template using project-specific data</li>
        <li class="text-gray-700"><strong class="font-semibold">Blog Posts:</strong> Blog post pages are created from a single template using post-specific content</li>
        <li class="text-gray-700"><strong class="font-semibold">Navigation:</strong> Active page highlighting is determined dynamically</li>
    </ul>
    
    <h3 id="template-functions" class="text-xl font-semibold mt-6 mb-3">Template Functions</h3>
    <p class="text-gray-700 mb-4">
        The portfolio example uses several template functions provided by Go Template SSG:
    </p>
    
    <ul class="list-disc pl-6 mb-6 space-y-2">
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">html</code>: To safely render HTML content in blog posts</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">formatDate</code>: To format publication dates in blog posts</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">truncate</code>: To create excerpts from longer content</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">urlEscape</code>: For handling URLs in social sharing links</li>
        <li class="text-gray-700"><code class="bg-gray-100 px-1 rounded">default</code>: To provide default values for optional data fields</li>
    </ul>
    
    <h2 id="lessons-learned" class="text-2xl font-bold mt-8 mb-4">Key Takeaways</h2>
    <p class="text-gray-700 mb-4">
        This example demonstrates several important concepts for building complex websites with Go Template SSG:
    </p>
    
    <ol class="list-decimal pl-6 mb-6 space-y-2">
        <li class="text-gray-700"><strong class="font-semibold">Multi-Page Architecture:</strong> How to structure templates and data for a site with many different page types</li>
        <li class="text-gray-700"><strong class="font-semibold">Component Reuse:</strong> Creating modular components that can be used across multiple pages</li>
        <li class="text-gray-700"><strong class="font-semibold">Content Management:</strong> Separating content from presentation with structured JSON data files</li>
        <li class="text-gray-700"><strong class="font-semibold">Dynamic Routing:</strong> Generating multiple pages from a single template based on data</li>
        <li class="text-gray-700"><strong class="font-semibold">Responsive Design:</strong> Building a site that works well on all device sizes</li>
    </ol>
    
    <h2 id="view-example" class="text-2xl font-bold mt-8 mb-4">Viewing the Example</h2>
    <p class="text-gray-700 mb-4">
        You can find the complete portfolio example in the <a href="https://github.com/csotherden/go-tmpl-ssg/tree/main/examples/portfolio" class="text-blue-600 hover:text-blue-800 underline">GitHub repository</a>.
    </p>
    
    <p class="text-gray-700 mb-4">To generate and view the portfolio site locally:</p>
    
    <div class="bg-gray-50 rounded-md p-4 mb-6 overflow-x-auto">
        <pre><code># Generate the static site
go run cmd/go-tmpl-generate/main.go --template examples/portfolio --output examples/portfolio/output

# Serve the generated site using the development server
go run cmd/go-tmpl-dev-server/main.go --source examples/portfolio --root examples/portfolio/output</code></pre>
    </div>
    
    <div class="mt-10 flex justify-between">
        <a href="/examples/landing/" class="px-4 py-2 border border-blue-600 text-blue-600 rounded hover:bg-blue-50 transition duration-200">
            ← Landing Page Example
        </a>
        <a href="/examples/" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition duration-200 flex items-center">
            Back to Examples
        </a>
    </div>
</div> 